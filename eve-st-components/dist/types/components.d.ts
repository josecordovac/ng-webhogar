/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import './stencil.core';

import '@ionic/core';
import 'ionicons';


export namespace Components {

  interface EveStAlert {
    /**
    * Set button round corner
    */
    'borderradius': string;
    /**
    * button color
    */
    'color': string;
    /**
    * custom button color
    */
    'customcolor': string;
    /**
    * button label
    */
    'label': string;
    /**
    * type of the button color
    */
    'type': string;
  }
  interface EveStAlertAttributes extends StencilHTMLAttributes {
    /**
    * Set button round corner
    */
    'borderradius'?: string;
    /**
    * button color
    */
    'color'?: string;
    /**
    * custom button color
    */
    'customcolor'?: string;
    /**
    * button label
    */
    'label'?: string;
    /**
    * type of the button color
    */
    'type'?: string;
  }

  interface EveStAvatar {
    'borderradius': string;
    'color': string;
    'customcolor': string;
    'iconfa': string;
    'imageurl': string;
    'size': string;
  }
  interface EveStAvatarAttributes extends StencilHTMLAttributes {
    'borderradius'?: string;
    'color'?: string;
    'customcolor'?: string;
    'iconfa'?: string;
    'imageurl'?: string;
    'size'?: string;
  }

  interface EveStButton {
    /**
    * Set button round corner
    */
    'borderradius': string;
    /**
    * button color
    */
    'color': string;
    /**
    * custom button color
    */
    'customcolor': string;
    /**
    * Set disabled
    */
    'disabled': boolean;
    /**
    * Set heights
    */
    'height': string;
    /**
    * button label
    */
    'id': string;
    /**
    * /**    button label
    */
    'label': string;
    /**
    * type of the button color
    */
    'type': string;
  }
  interface EveStButtonAttributes extends StencilHTMLAttributes {
    /**
    * Set button round corner
    */
    'borderradius'?: string;
    /**
    * button color
    */
    'color'?: string;
    /**
    * custom button color
    */
    'customcolor'?: string;
    /**
    * Set disabled
    */
    'disabled'?: boolean;
    /**
    * Set heights
    */
    'height'?: string;
    /**
    * button label
    */
    'id'?: string;
    /**
    * /**    button label
    */
    'label'?: string;
    /**
    * Emite un evento cuando pierda el focus
    */
    'onOnBlur'?: (event: CustomEvent) => void;
    /**
    * Click Event
    */
    'onOnClick'?: (event: CustomEvent) => void;
    /**
    * Emite un evento cuando toma el focus
    */
    'onOnFocus'?: (event: CustomEvent) => void;
    /**
    * type of the button color
    */
    'type'?: string;
  }

  interface EveStCheckbox {
    'checked': boolean;
    'color': string;
    'customcolor': string;
    'customcolorerror': string;
    'disabled': boolean;
    'errors': string;
    'label': string;
    'name': string;
  }
  interface EveStCheckboxAttributes extends StencilHTMLAttributes {
    'checked'?: boolean;
    'color'?: string;
    'customcolor'?: string;
    'customcolorerror'?: string;
    'disabled'?: boolean;
    'errors'?: string;
    'label'?: string;
    'name'?: string;
    'onOnChange'?: (event: CustomEvent) => void;
  }

  interface EveStDropdown {
    'color': string;
    'customcolor': string;
    'customcolorerror': string;
    'disabled': boolean;
    'errors': string;
    'imageleftturl': string;
    'imagerightturl': string;
    'label': string;
    'listitems': [{ [key: string]: string }];
    'name': string;
    'placeholder': string;
    'value': { [key: string]: string };
  }
  interface EveStDropdownAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'customcolor'?: string;
    'customcolorerror'?: string;
    'disabled'?: boolean;
    'errors'?: string;
    'imageleftturl'?: string;
    'imagerightturl'?: string;
    'label'?: string;
    'listitems'?: [{ [key: string]: string }];
    'name'?: string;
    'onOnBlur'?: (event: CustomEvent) => void;
    'onOnChange'?: (event: CustomEvent) => void;
    'placeholder'?: string;
    'value'?: { [key: string]: string };
  }

  interface EveStItem {
    'line': string;
  }
  interface EveStItemAttributes extends StencilHTMLAttributes {
    'line'?: string;
  }

  interface EveStList {}
  interface EveStListAttributes extends StencilHTMLAttributes {}

  interface EveStModal {
    /**
    * modal color
    */
    'color': string;
    /**
    * custom modal customcolor
    */
    'customcolor': string;
    /**
    * modal shoe
    */
    'show': boolean;
  }
  interface EveStModalAttributes extends StencilHTMLAttributes {
    /**
    * modal color
    */
    'color'?: string;
    /**
    * custom modal customcolor
    */
    'customcolor'?: string;
    /**
    * modal close
    */
    'onOnClose'?: (event: CustomEvent) => void;
    /**
    * modal shoe
    */
    'show'?: boolean;
  }

  interface EveStOverlay {
    /**
    * overlay closeonclick
    */
    'closeonclick': boolean;
    /**
    * overlay color
    */
    'color': string;
    /**
    * custom overlay customcolor
    */
    'customcolor': string;
    /**
    * overlay show
    */
    'show': boolean;
  }
  interface EveStOverlayAttributes extends StencilHTMLAttributes {
    /**
    * overlay closeonclick
    */
    'closeonclick'?: boolean;
    /**
    * overlay color
    */
    'color'?: string;
    /**
    * custom overlay customcolor
    */
    'customcolor'?: string;
    /**
    * overay close
    */
    'onOnClose'?: (event: CustomEvent) => void;
    /**
    * overlay show
    */
    'show'?: boolean;
  }

  interface EveStTextbox {
    'color': string;
    'customcolor': string;
    'customcolorerror': string;
    'disabled': boolean;
    'errors': string;
    'label': string;
    'name': string;
    'placeholder': string;
    'textcolor': string;
    'type': string;
    'usepattern': string;
    'value': string;
  }
  interface EveStTextboxAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'customcolor'?: string;
    'customcolorerror'?: string;
    'disabled'?: boolean;
    'errors'?: string;
    'label'?: string;
    'name'?: string;
    'onOnBlur'?: (event: CustomEvent) => void;
    'onOnChange'?: (event: CustomEvent) => void;
    'onOnFocus'?: (event: CustomEvent) => void;
    'placeholder'?: string;
    'textcolor'?: string;
    'type'?: string;
    'usepattern'?: string;
    'value'?: string;
  }

  interface EveStLoginStandard {}
  interface EveStLoginStandardAttributes extends StencilHTMLAttributes {}
}

declare global {
  interface StencilElementInterfaces {
    'EveStAlert': Components.EveStAlert;
    'EveStAvatar': Components.EveStAvatar;
    'EveStButton': Components.EveStButton;
    'EveStCheckbox': Components.EveStCheckbox;
    'EveStDropdown': Components.EveStDropdown;
    'EveStItem': Components.EveStItem;
    'EveStList': Components.EveStList;
    'EveStModal': Components.EveStModal;
    'EveStOverlay': Components.EveStOverlay;
    'EveStTextbox': Components.EveStTextbox;
    'EveStLoginStandard': Components.EveStLoginStandard;
  }

  interface StencilIntrinsicElements {
    'eve-st-alert': Components.EveStAlertAttributes;
    'eve-st-avatar': Components.EveStAvatarAttributes;
    'eve-st-button': Components.EveStButtonAttributes;
    'eve-st-checkbox': Components.EveStCheckboxAttributes;
    'eve-st-dropdown': Components.EveStDropdownAttributes;
    'eve-st-item': Components.EveStItemAttributes;
    'eve-st-list': Components.EveStListAttributes;
    'eve-st-modal': Components.EveStModalAttributes;
    'eve-st-overlay': Components.EveStOverlayAttributes;
    'eve-st-textbox': Components.EveStTextboxAttributes;
    'eve-st-login-standard': Components.EveStLoginStandardAttributes;
  }


  interface HTMLEveStAlertElement extends Components.EveStAlert, HTMLStencilElement {}
  var HTMLEveStAlertElement: {
    prototype: HTMLEveStAlertElement;
    new (): HTMLEveStAlertElement;
  };

  interface HTMLEveStAvatarElement extends Components.EveStAvatar, HTMLStencilElement {}
  var HTMLEveStAvatarElement: {
    prototype: HTMLEveStAvatarElement;
    new (): HTMLEveStAvatarElement;
  };

  interface HTMLEveStButtonElement extends Components.EveStButton, HTMLStencilElement {}
  var HTMLEveStButtonElement: {
    prototype: HTMLEveStButtonElement;
    new (): HTMLEveStButtonElement;
  };

  interface HTMLEveStCheckboxElement extends Components.EveStCheckbox, HTMLStencilElement {}
  var HTMLEveStCheckboxElement: {
    prototype: HTMLEveStCheckboxElement;
    new (): HTMLEveStCheckboxElement;
  };

  interface HTMLEveStDropdownElement extends Components.EveStDropdown, HTMLStencilElement {}
  var HTMLEveStDropdownElement: {
    prototype: HTMLEveStDropdownElement;
    new (): HTMLEveStDropdownElement;
  };

  interface HTMLEveStItemElement extends Components.EveStItem, HTMLStencilElement {}
  var HTMLEveStItemElement: {
    prototype: HTMLEveStItemElement;
    new (): HTMLEveStItemElement;
  };

  interface HTMLEveStListElement extends Components.EveStList, HTMLStencilElement {}
  var HTMLEveStListElement: {
    prototype: HTMLEveStListElement;
    new (): HTMLEveStListElement;
  };

  interface HTMLEveStModalElement extends Components.EveStModal, HTMLStencilElement {}
  var HTMLEveStModalElement: {
    prototype: HTMLEveStModalElement;
    new (): HTMLEveStModalElement;
  };

  interface HTMLEveStOverlayElement extends Components.EveStOverlay, HTMLStencilElement {}
  var HTMLEveStOverlayElement: {
    prototype: HTMLEveStOverlayElement;
    new (): HTMLEveStOverlayElement;
  };

  interface HTMLEveStTextboxElement extends Components.EveStTextbox, HTMLStencilElement {}
  var HTMLEveStTextboxElement: {
    prototype: HTMLEveStTextboxElement;
    new (): HTMLEveStTextboxElement;
  };

  interface HTMLEveStLoginStandardElement extends Components.EveStLoginStandard, HTMLStencilElement {}
  var HTMLEveStLoginStandardElement: {
    prototype: HTMLEveStLoginStandardElement;
    new (): HTMLEveStLoginStandardElement;
  };

  interface HTMLElementTagNameMap {
    'eve-st-alert': HTMLEveStAlertElement
    'eve-st-avatar': HTMLEveStAvatarElement
    'eve-st-button': HTMLEveStButtonElement
    'eve-st-checkbox': HTMLEveStCheckboxElement
    'eve-st-dropdown': HTMLEveStDropdownElement
    'eve-st-item': HTMLEveStItemElement
    'eve-st-list': HTMLEveStListElement
    'eve-st-modal': HTMLEveStModalElement
    'eve-st-overlay': HTMLEveStOverlayElement
    'eve-st-textbox': HTMLEveStTextboxElement
    'eve-st-login-standard': HTMLEveStLoginStandardElement
  }

  interface ElementTagNameMap {
    'eve-st-alert': HTMLEveStAlertElement;
    'eve-st-avatar': HTMLEveStAvatarElement;
    'eve-st-button': HTMLEveStButtonElement;
    'eve-st-checkbox': HTMLEveStCheckboxElement;
    'eve-st-dropdown': HTMLEveStDropdownElement;
    'eve-st-item': HTMLEveStItemElement;
    'eve-st-list': HTMLEveStListElement;
    'eve-st-modal': HTMLEveStModalElement;
    'eve-st-overlay': HTMLEveStOverlayElement;
    'eve-st-textbox': HTMLEveStTextboxElement;
    'eve-st-login-standard': HTMLEveStLoginStandardElement;
  }


}
